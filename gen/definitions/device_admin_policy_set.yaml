---
name: Device Admin Policy Set
rest_endpoint: /api/v1/policy/device-admin/policy-set
data_source_name_query: true
id_path: response.id
ignore_delete_error: Attempted to delete default
doc_category: Device Administration
attributes:
  - model_name: name
    type: String
    mandatory: true
    description: Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]
    example: PolicySet1
  - model_name: description
    type: String
    description: The description of the policy set
    example: My description
  - model_name: isProxy
    type: Bool
    description: Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'
    example: false
  - model_name: rank
    type: Int64
    description: The rank (priority) in relation to other policy sets. Lower rank is higher priority.
    example: 0
  - model_name: serviceName
    type: String
    mandatory: true
    description: Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.
    example: Default Device Admin
  - model_name: state
    type: String
    enum_values: [disabled, enabled, monitor]
    description: The state that the policy set is in. A disabled policy set cannot be matched.
    example: enabled
  - model_name: conditionType
    data_path: [condition]
    mandatory: true
    type: String
    enum_values:
      [
        ConditionAndBlock,
        ConditionAttributes,
        ConditionOrBlock,
        ConditionReference,
      ]
    description: Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
    example: ConditionAttributes
    minimum_test_value: '"ConditionReference"'
  - model_name: id
    data_path: [condition]
    tf_name: condition_id
    type: String
    description: UUID for condition
    example: 12345678-f0e7-456b-a2d1-876543320123
    exclude_test: true
    minimum_test_value: ise_device_admin_condition.test.id
  - model_name: isNegate
    data_path: [condition]
    tf_name: condition_is_negate
    type: Bool
    description: Indicates whereas this condition is in negate mode
    example: false
  - model_name: attributeName
    data_path: [condition]
    tf_name: condition_attribute_name
    type: String
    description: Dictionary attribute name
    example: Location
  - model_name: attributeValue
    data_path: [condition]
    tf_name: condition_attribute_value
    type: String
    description: Attribute value for condition. Value type is specified in dictionary object.
    example: All Locations
  - model_name: dictionaryName
    data_path: [condition]
    tf_name: condition_dictionary_name
    type: String
    description: Dictionary name
    example: DEVICE
  - model_name: dictionaryValue
    data_path: [condition]
    tf_name: condition_dictionary_value
    type: String
    description: Dictionary value
    example: abc
    exclude_test: true
  - model_name: operator
    data_path: [condition]
    tf_name: condition_operator
    type: String
    enum_values:
      [
        contains,
        endsWith,
        equals,
        greaterOrEquals,
        greaterThan,
        in,
        ipEquals,
        ipGreaterThan,
        ipLessThan,
        ipNotEquals,
        lessOrEquals,
        lessThan,
        matches,
        notContains,
        notEndsWith,
        notEquals,
        notIn,
        notStartsWith,
        startsWith,
      ]
    description: Equality operator
    example: equals
  - model_name: children
    type: List
    description: List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
    exclude_test: true
    data_path: [condition]
    attributes:
      - model_name: conditionType
        mandatory: true
        type: String
        enum_values:
          [
            ConditionAndBlock,
            ConditionAttributes,
            ConditionOrBlock,
            ConditionReference,
          ]
        description: Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
        example: ConditionAttributes
        minimum_test_value: '"ConditionReference"'
      - model_name: id
        type: String
        description: UUID for condition
        example: 12345678-f0e7-456b-a2d1-876543320123
        minimum_test_value: ise_device_admin_condition.test.id
      - model_name: isNegate
        type: Bool
        description: Indicates whereas this condition is in negate mode
        example: false
      - model_name: attributeName
        type: String
        description: Dictionary attribute name
        example: Location
      - model_name: attributeValue
        type: String
        description: Attribute value for condition. Value type is specified in dictionary object.
        example: All Locations
      - model_name: dictionaryName
        type: String
        description: Dictionary name
        example: DEVICE
      - model_name: dictionaryValue
        type: String
        description: Dictionary value
        example: abc
      - model_name: operator
        type: String
        enum_values:
          [
            contains,
            endsWith,
            equals,
            greaterOrEquals,
            greaterThan,
            in,
            ipEquals,
            ipGreaterThan,
            ipLessThan,
            ipNotEquals,
            lessOrEquals,
            lessThan,
            matches,
            notContains,
            notEndsWith,
            notEquals,
            notIn,
            notStartsWith,
            startsWith,
          ]
        description: Equality operator
        example: equals
      - model_name: children
        type: List
        description: List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
        attributes:
          - model_name: conditionType
            mandatory: true
            type: String
            enum_values:
              [
                ConditionAttributes,
                ConditionReference,
              ]
            description: Condition type.
            example: ConditionAttributes
            minimum_test_value: '"ConditionReference"'
          - model_name: id
            type: String
            description: UUID for condition
            example: 12345678-f0e7-456b-a2d1-876543320123
            minimum_test_value: ise_device_admin_condition.test.id
          - model_name: isNegate
            type: Bool
            description: Indicates whereas this condition is in negate mode
            example: false
          - model_name: attributeName
            type: String
            description: Dictionary attribute name
            example: Location
          - model_name: attributeValue
            type: String
            description: Attribute value for condition. Value type is specified in dictionary object.
            example: All Locations
          - model_name: dictionaryName
            type: String
            description: Dictionary name
            example: DEVICE
          - model_name: dictionaryValue
            type: String
            description: Dictionary value
            example: abc
          - model_name: operator
            type: String
            enum_values:
              [
                contains,
                endsWith,
                equals,
                greaterOrEquals,
                greaterThan,
                in,
                ipEquals,
                ipGreaterThan,
                ipLessThan,
                ipNotEquals,
                lessOrEquals,
                lessThan,
                matches,
                notContains,
                notEndsWith,
                notEquals,
                notIn,
                notStartsWith,
                startsWith,
              ]
            description: Equality operator
            example: equals
test_prerequisites: |
  resource "ise_device_admin_condition" "test" {
    name            = "Cond1"
    condition_type  = "LibraryConditionAttributes"
    attribute_name  = "User"
    attribute_value = "User1"
    dictionary_name = "TACACS"
    operator        = "equals"
  }
