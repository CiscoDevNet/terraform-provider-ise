// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"

	"github.com/CiscoDevNet/terraform-provider-ise/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

//template:begin types
type TrustSecEgressMatrixCell struct {
	Id               types.String `tfsdk:"id"`
	Description      types.String `tfsdk:"description"`
	DefaultRule      types.String `tfsdk:"default_rule"`
	MatrixCellStatus types.String `tfsdk:"matrix_cell_status"`
	Sgacls           types.List   `tfsdk:"sgacls"`
	SourceSgtId      types.String `tfsdk:"source_sgt_id"`
	DestinationSgtId types.String `tfsdk:"destination_sgt_id"`
}

//template:end types

//template:begin getPath
func (data TrustSecEgressMatrixCell) getPath() string {
	return "/ers/config/egressmatrixcell"
}

//template:end getPath

//template:begin toBody
func (data TrustSecEgressMatrixCell) toBody(ctx context.Context, state TrustSecEgressMatrixCell) string {
	body := ""
	if !data.Description.IsNull() {
		body, _ = sjson.Set(body, "EgressMatrixCell.description", data.Description.ValueString())
	}
	if !data.DefaultRule.IsNull() {
		body, _ = sjson.Set(body, "EgressMatrixCell.defaultRule", data.DefaultRule.ValueString())
	}
	if !data.MatrixCellStatus.IsNull() {
		body, _ = sjson.Set(body, "EgressMatrixCell.matrixCellStatus", data.MatrixCellStatus.ValueString())
	}
	if !data.Sgacls.IsNull() {
		var values []string
		data.Sgacls.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "EgressMatrixCell.sgacls", values)
	}
	if !data.SourceSgtId.IsNull() {
		body, _ = sjson.Set(body, "EgressMatrixCell.sourceSgtId", data.SourceSgtId.ValueString())
	}
	if !data.DestinationSgtId.IsNull() {
		body, _ = sjson.Set(body, "EgressMatrixCell.destinationSgtId", data.DestinationSgtId.ValueString())
	}
	return body
}

//template:end toBody

//template:begin fromBody
func (data *TrustSecEgressMatrixCell) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("EgressMatrixCell.description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("EgressMatrixCell.defaultRule"); value.Exists() {
		data.DefaultRule = types.StringValue(value.String())
	} else {
		data.DefaultRule = types.StringValue("NONE")
	}
	if value := res.Get("EgressMatrixCell.matrixCellStatus"); value.Exists() {
		data.MatrixCellStatus = types.StringValue(value.String())
	} else {
		data.MatrixCellStatus = types.StringValue("DISABLED")
	}
	if value := res.Get("EgressMatrixCell.sgacls"); value.Exists() {
		data.Sgacls = helpers.GetStringList(value.Array())
	} else {
		data.Sgacls = types.ListNull(types.StringType)
	}
	if value := res.Get("EgressMatrixCell.sourceSgtId"); value.Exists() {
		data.SourceSgtId = types.StringValue(value.String())
	} else {
		data.SourceSgtId = types.StringNull()
	}
	if value := res.Get("EgressMatrixCell.destinationSgtId"); value.Exists() {
		data.DestinationSgtId = types.StringValue(value.String())
	} else {
		data.DestinationSgtId = types.StringNull()
	}
}

//template:end fromBody

//template:begin updateFromBody
func (data *TrustSecEgressMatrixCell) updateFromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("EgressMatrixCell.description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("EgressMatrixCell.defaultRule"); value.Exists() && !data.DefaultRule.IsNull() {
		data.DefaultRule = types.StringValue(value.String())
	} else if data.DefaultRule.ValueString() != "NONE" {
		data.DefaultRule = types.StringNull()
	}
	if value := res.Get("EgressMatrixCell.matrixCellStatus"); value.Exists() && !data.MatrixCellStatus.IsNull() {
		data.MatrixCellStatus = types.StringValue(value.String())
	} else if data.MatrixCellStatus.ValueString() != "DISABLED" {
		data.MatrixCellStatus = types.StringNull()
	}
	if value := res.Get("EgressMatrixCell.sgacls"); value.Exists() && !data.Sgacls.IsNull() {
		data.Sgacls = helpers.GetStringList(value.Array())
	} else {
		data.Sgacls = types.ListNull(types.StringType)
	}
	if value := res.Get("EgressMatrixCell.sourceSgtId"); value.Exists() && !data.SourceSgtId.IsNull() {
		data.SourceSgtId = types.StringValue(value.String())
	} else {
		data.SourceSgtId = types.StringNull()
	}
	if value := res.Get("EgressMatrixCell.destinationSgtId"); value.Exists() && !data.DestinationSgtId.IsNull() {
		data.DestinationSgtId = types.StringValue(value.String())
	} else {
		data.DestinationSgtId = types.StringNull()
	}
}

//template:end updateFromBody
