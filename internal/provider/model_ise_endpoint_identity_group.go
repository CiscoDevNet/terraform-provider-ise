// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

//template:begin types
type EndpointIdentityGroup struct {
	Id                            types.String `tfsdk:"id"`
	Name                          types.String `tfsdk:"name"`
	Description                   types.String `tfsdk:"description"`
	SystemDefined                 types.Bool   `tfsdk:"system_defined"`
	ParentEndpointIdentityGroupId types.String `tfsdk:"parent_endpoint_identity_group_id"`
}

//template:end types

//template:begin getPath
func (data EndpointIdentityGroup) getPath() string {
	return "/ers/config/endpointgroup"
}

//template:end getPath

//template:begin toBody
func (data EndpointIdentityGroup) toBody(ctx context.Context, state EndpointIdentityGroup) string {
	body := ""
	if !data.Name.IsNull() {
		body, _ = sjson.Set(body, "EndPointGroup.name", data.Name.ValueString())
	}
	if !data.Description.IsNull() {
		body, _ = sjson.Set(body, "EndPointGroup.description", data.Description.ValueString())
	}
	if !data.SystemDefined.IsNull() {
		body, _ = sjson.Set(body, "EndPointGroup.systemDefined", data.SystemDefined.ValueBool())
	}
	if !data.ParentEndpointIdentityGroupId.IsNull() {
		body, _ = sjson.Set(body, "EndPointGroup.parentId", data.ParentEndpointIdentityGroupId.ValueString())
	}
	return body
}

//template:end toBody

//template:begin fromBody
func (data *EndpointIdentityGroup) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("EndPointGroup.name"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("EndPointGroup.description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("EndPointGroup.systemDefined"); value.Exists() {
		data.SystemDefined = types.BoolValue(value.Bool())
	} else {
		data.SystemDefined = types.BoolNull()
	}
	if value := res.Get("EndPointGroup.parentId"); value.Exists() {
		data.ParentEndpointIdentityGroupId = types.StringValue(value.String())
	} else {
		data.ParentEndpointIdentityGroupId = types.StringNull()
	}
}

//template:end fromBody

//template:begin updateFromBody
func (data *EndpointIdentityGroup) updateFromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("EndPointGroup.name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("EndPointGroup.description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("EndPointGroup.systemDefined"); value.Exists() && !data.SystemDefined.IsNull() {
		data.SystemDefined = types.BoolValue(value.Bool())
	} else {
		data.SystemDefined = types.BoolNull()
	}
	if value := res.Get("EndPointGroup.parentId"); value.Exists() && !data.ParentEndpointIdentityGroupId.IsNull() {
		data.ParentEndpointIdentityGroupId = types.StringValue(value.String())
	} else {
		data.ParentEndpointIdentityGroupId = types.StringNull()
	}
}

//template:end updateFromBody
