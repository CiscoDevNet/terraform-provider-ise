// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

//template:end imports

//template:begin testAcc
func TestAccIseNetworkAccessAuthenticationRuleUpdateRank(t *testing.T) {
	if os.Getenv("TEST") == "" {
		t.Skip("skipping test, set environment variable TEST")
	}
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("ise_network_access_authentication_rule_update_rank.test", "rank", "0"))

	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIseNetworkAccessAuthenticationRuleUpdateRankPrerequisitesConfig + testAccIseNetworkAccessAuthenticationRuleUpdateRankConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIseNetworkAccessAuthenticationRuleUpdateRankPrerequisitesConfig + testAccIseNetworkAccessAuthenticationRuleUpdateRankConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

//template:end testAcc

//template:begin testPrerequisites
const testAccIseNetworkAccessAuthenticationRuleUpdateRankPrerequisitesConfig = `
resource "ise_network_access_policy_set" "test" {
  name                      = "PolicySet1"
  service_name              = "Default Network Access"
  condition_type            = "ConditionAttributes"
  condition_is_negate       = false
  condition_attribute_name  = "Location"
  condition_attribute_value = "All Locations"
  condition_dictionary_name = "DEVICE"
  condition_operator        = "equals"
}
resource "ise_network_access_condition" "test" {
  name            = "Cond1"
  condition_type  = "LibraryConditionAttributes"
  attribute_name  = "NAS-Port-Type"
  attribute_value = "Wireless - IEEE 802.11"
  dictionary_name = "Radius"
  operator        = "equals"
}

`

//template:end testPrerequisites

//template:begin testAccConfigMinimal
func testAccIseNetworkAccessAuthenticationRuleUpdateRankConfig_minimum() string {
	config := `resource "ise_network_access_authentication_rule_update_rank" "test" {` + "\n"
	config += `	auth_rule_id = "d82952cb-b901-4b09-b363-5ebf39bdbaf9"` + "\n"
	config += `	policy_set_id = ise_network_access_policy_set.test.id` + "\n"
	config += `	name = "Rule1"` + "\n"
	config += `	condition_type = "ConditionReference"` + "\n"
	config += `	condition_id = ise_network_access_condition.test.id` + "\n"
	config += `	if_auth_fail = "REJECT"` + "\n"
	config += `	if_process_fail = "DROP"` + "\n"
	config += `	if_user_not_found = "REJECT"` + "\n"
	config += `}` + "\n"
	return config
}

//template:end testAccConfigMinimal

//template:begin testAccConfigAll
func testAccIseNetworkAccessAuthenticationRuleUpdateRankConfig_all() string {
	config := `resource "ise_network_access_authentication_rule_update_rank" "test" {` + "\n"
	config += `	auth_rule_id = "d82952cb-b901-4b09-b363-5ebf39bdbaf9"` + "\n"
	config += `	policy_set_id = ise_network_access_policy_set.test.id` + "\n"
	config += `	name = "Rule1"` + "\n"
	config += `	default = false` + "\n"
	config += `	rank = 0` + "\n"
	config += `	state = "enabled"` + "\n"
	config += `	condition_type = "ConditionAttributes"` + "\n"
	config += `	condition_is_negate = false` + "\n"
	config += `	condition_attribute_name = "Location"` + "\n"
	config += `	condition_attribute_value = "All Locations"` + "\n"
	config += `	condition_dictionary_name = "DEVICE"` + "\n"
	config += `	condition_operator = "equals"` + "\n"
	config += `	identity_source_name = "Internal Endpoints"` + "\n"
	config += `	if_auth_fail = "REJECT"` + "\n"
	config += `	if_process_fail = "DROP"` + "\n"
	config += `	if_user_not_found = "REJECT"` + "\n"
	config += `}` + "\n"
	return config
}

//template:end testAccConfigAll
