// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

//template:begin types
type AuthorizationProfile struct {
	Id                                 types.String                             `tfsdk:"id"`
	Name                               types.String                             `tfsdk:"name"`
	Description                        types.String                             `tfsdk:"description"`
	NameId                             types.String                             `tfsdk:"name_id"`
	TagId                              types.Int64                              `tfsdk:"tag_id"`
	WebRedirectionType                 types.String                             `tfsdk:"web_redirection_type"`
	WebRedirectionAcl                  types.String                             `tfsdk:"web_redirection_acl"`
	PortalName                         types.String                             `tfsdk:"portal_name"`
	StaticIpHostNameFqdn               types.String                             `tfsdk:"static_ip_host_name_fqdn"`
	DisplayCertificatesRenewalMessages types.Bool                               `tfsdk:"display_certificates_renewal_messages"`
	AccessType                         types.String                             `tfsdk:"access_type"`
	AuthzProfileType                   types.String                             `tfsdk:"authz_profile_type"`
	ProfileName                        types.String                             `tfsdk:"profile_name"`
	AirespaceAcl                       types.String                             `tfsdk:"airespace_acl"`
	Acl                                types.String                             `tfsdk:"acl"`
	DaclName                           types.String                             `tfsdk:"dacl_name"`
	AutoSmartPort                      types.String                             `tfsdk:"auto_smart_port"`
	InterfaceTemplate                  types.String                             `tfsdk:"interface_template"`
	Ipv6AclFilter                      types.String                             `tfsdk:"ipv6_acl_filter"`
	AvcProfile                         types.String                             `tfsdk:"avc_profile"`
	AsaVpn                             types.String                             `tfsdk:"asa_vpn"`
	UniqueIdentifier                   types.String                             `tfsdk:"unique_identifier"`
	TrackMovement                      types.Bool                               `tfsdk:"track_movement"`
	ServiceTemplate                    types.Bool                               `tfsdk:"service_template"`
	EasywiredSessionCandidate          types.Bool                               `tfsdk:"easywired_session_candidate"`
	VoiceDomainPermission              types.Bool                               `tfsdk:"voice_domain_permission"`
	Neat                               types.Bool                               `tfsdk:"neat"`
	WebAuth                            types.Bool                               `tfsdk:"web_auth"`
	MacSecPolicy                       types.String                             `tfsdk:"mac_sec_policy"`
	Connectivity                       types.String                             `tfsdk:"connectivity"`
	Timer                              types.Int64                              `tfsdk:"timer"`
	AdvancedAttributes                 []AuthorizationProfileAdvancedAttributes `tfsdk:"advanced_attributes"`
	Ipv6DaclName                       types.String                             `tfsdk:"ipv6_dacl_name"`
	AirespaceIpv6Acl                   types.String                             `tfsdk:"airespace_ipv6_acl"`
}

type AuthorizationProfileAdvancedAttributes struct {
	Attribute1ValueType types.String `tfsdk:"attribute_1_value_type"`
	DictionaryName      types.String `tfsdk:"dictionary_name"`
	AttributeName       types.String `tfsdk:"attribute_name"`
	Attribute2ValueType types.String `tfsdk:"attribute_2_value_type"`
	Value               types.String `tfsdk:"value"`
}

//template:end types

//template:begin getPath
func (data AuthorizationProfile) getPath() string {
	return "/ers/config/authorizationprofile"
}

//template:end getPath

//template:begin toBody
func (data AuthorizationProfile) toBody(ctx context.Context, state AuthorizationProfile) string {
	body := ""
	if !data.Name.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.name", data.Name.ValueString())
	}
	if !data.Description.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.description", data.Description.ValueString())
	}
	if !data.NameId.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.vlan.nameID", data.NameId.ValueString())
	}
	if !data.TagId.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.vlan.tagID", data.TagId.ValueInt64())
	}
	if !data.WebRedirectionType.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.webRedirection.WebRedirectionType", data.WebRedirectionType.ValueString())
	}
	if !data.WebRedirectionAcl.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.webRedirection.acl", data.WebRedirectionAcl.ValueString())
	}
	if !data.PortalName.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.webRedirection.portalName", data.PortalName.ValueString())
	}
	if !data.StaticIpHostNameFqdn.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.webRedirection.staticIPHostNameFQDN", data.StaticIpHostNameFqdn.ValueString())
	}
	if !data.DisplayCertificatesRenewalMessages.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.webRedirection.displayCertificatesRenewalMessages", data.DisplayCertificatesRenewalMessages.ValueBool())
	}
	if !data.AccessType.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.accessType", data.AccessType.ValueString())
	}
	if !data.AuthzProfileType.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.authzProfileType", data.AuthzProfileType.ValueString())
	}
	if !data.ProfileName.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.profileName", data.ProfileName.ValueString())
	}
	if !data.AirespaceAcl.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.airespaceACL", data.AirespaceAcl.ValueString())
	}
	if !data.Acl.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.acl", data.Acl.ValueString())
	}
	if !data.DaclName.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.daclName", data.DaclName.ValueString())
	}
	if !data.AutoSmartPort.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.autoSmartPort", data.AutoSmartPort.ValueString())
	}
	if !data.InterfaceTemplate.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.interfaceTemplate", data.InterfaceTemplate.ValueString())
	}
	if !data.Ipv6AclFilter.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.ipv6ACLFilter", data.Ipv6AclFilter.ValueString())
	}
	if !data.AvcProfile.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.avcProfile", data.AvcProfile.ValueString())
	}
	if !data.AsaVpn.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.asaVpn", data.AsaVpn.ValueString())
	}
	if !data.UniqueIdentifier.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.uniqueIdentifier", data.UniqueIdentifier.ValueString())
	}
	if !data.TrackMovement.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.trackMovement", data.TrackMovement.ValueBool())
	}
	if !data.ServiceTemplate.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.serviceTemplate", data.ServiceTemplate.ValueBool())
	}
	if !data.EasywiredSessionCandidate.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.easywiredSessionCandidate", data.EasywiredSessionCandidate.ValueBool())
	}
	if !data.VoiceDomainPermission.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.voiceDomainPermission", data.VoiceDomainPermission.ValueBool())
	}
	if !data.Neat.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.neat", data.Neat.ValueBool())
	}
	if !data.WebAuth.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.webAuth", data.WebAuth.ValueBool())
	}
	if !data.MacSecPolicy.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.macSecPolicy", data.MacSecPolicy.ValueString())
	}
	if !data.Connectivity.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.reauth.connectivity", data.Connectivity.ValueString())
	}
	if !data.Timer.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.reauth.timer", data.Timer.ValueInt64())
	}
	if len(data.AdvancedAttributes) > 0 {
		body, _ = sjson.Set(body, "AuthorizationProfile.advancedAttributes", []interface{}{})
		for _, item := range data.AdvancedAttributes {
			itemBody := ""
			if !item.Attribute1ValueType.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "leftHandSideDictionaryAttribue.AdvancedAttributeValueType", item.Attribute1ValueType.ValueString())
			}
			if !item.DictionaryName.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "leftHandSideDictionaryAttribue.dictionaryName", item.DictionaryName.ValueString())
			}
			if !item.AttributeName.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "leftHandSideDictionaryAttribue.attributeName", item.AttributeName.ValueString())
			}
			if !item.Attribute2ValueType.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "rightHandSideAttribueValue.AdvancedAttributeValueType", item.Attribute2ValueType.ValueString())
			}
			if !item.Value.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "rightHandSideAttribueValue.value", item.Value.ValueString())
			}
			body, _ = sjson.SetRaw(body, "AuthorizationProfile.advancedAttributes.-1", itemBody)
		}
	}
	if !data.Ipv6DaclName.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.ipv6DaclName", data.Ipv6DaclName.ValueString())
	}
	if !data.AirespaceIpv6Acl.IsNull() {
		body, _ = sjson.Set(body, "AuthorizationProfile.airespaceIPv6ACL", data.AirespaceIpv6Acl.ValueString())
	}
	return body
}

//template:end toBody

//template:begin fromBody
func (data *AuthorizationProfile) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("AuthorizationProfile.name"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.vlan.nameID"); value.Exists() {
		data.NameId = types.StringValue(value.String())
	} else {
		data.NameId = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.vlan.tagID"); value.Exists() {
		data.TagId = types.Int64Value(value.Int())
	} else {
		data.TagId = types.Int64Null()
	}
	if value := res.Get("AuthorizationProfile.webRedirection.WebRedirectionType"); value.Exists() {
		data.WebRedirectionType = types.StringValue(value.String())
	} else {
		data.WebRedirectionType = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.webRedirection.acl"); value.Exists() {
		data.WebRedirectionAcl = types.StringValue(value.String())
	} else {
		data.WebRedirectionAcl = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.webRedirection.portalName"); value.Exists() {
		data.PortalName = types.StringValue(value.String())
	} else {
		data.PortalName = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.webRedirection.staticIPHostNameFQDN"); value.Exists() {
		data.StaticIpHostNameFqdn = types.StringValue(value.String())
	} else {
		data.StaticIpHostNameFqdn = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.webRedirection.displayCertificatesRenewalMessages"); value.Exists() {
		data.DisplayCertificatesRenewalMessages = types.BoolValue(value.Bool())
	} else {
		data.DisplayCertificatesRenewalMessages = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.accessType"); value.Exists() {
		data.AccessType = types.StringValue(value.String())
	} else {
		data.AccessType = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.authzProfileType"); value.Exists() {
		data.AuthzProfileType = types.StringValue(value.String())
	} else {
		data.AuthzProfileType = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.profileName"); value.Exists() {
		data.ProfileName = types.StringValue(value.String())
	} else {
		data.ProfileName = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.airespaceACL"); value.Exists() {
		data.AirespaceAcl = types.StringValue(value.String())
	} else {
		data.AirespaceAcl = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.acl"); value.Exists() {
		data.Acl = types.StringValue(value.String())
	} else {
		data.Acl = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.daclName"); value.Exists() {
		data.DaclName = types.StringValue(value.String())
	} else {
		data.DaclName = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.autoSmartPort"); value.Exists() {
		data.AutoSmartPort = types.StringValue(value.String())
	} else {
		data.AutoSmartPort = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.interfaceTemplate"); value.Exists() {
		data.InterfaceTemplate = types.StringValue(value.String())
	} else {
		data.InterfaceTemplate = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.ipv6ACLFilter"); value.Exists() {
		data.Ipv6AclFilter = types.StringValue(value.String())
	} else {
		data.Ipv6AclFilter = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.avcProfile"); value.Exists() {
		data.AvcProfile = types.StringValue(value.String())
	} else {
		data.AvcProfile = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.asaVpn"); value.Exists() {
		data.AsaVpn = types.StringValue(value.String())
	} else {
		data.AsaVpn = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.uniqueIdentifier"); value.Exists() {
		data.UniqueIdentifier = types.StringValue(value.String())
	} else {
		data.UniqueIdentifier = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.trackMovement"); value.Exists() {
		data.TrackMovement = types.BoolValue(value.Bool())
	} else {
		data.TrackMovement = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.serviceTemplate"); value.Exists() {
		data.ServiceTemplate = types.BoolValue(value.Bool())
	} else {
		data.ServiceTemplate = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.easywiredSessionCandidate"); value.Exists() {
		data.EasywiredSessionCandidate = types.BoolValue(value.Bool())
	} else {
		data.EasywiredSessionCandidate = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.voiceDomainPermission"); value.Exists() {
		data.VoiceDomainPermission = types.BoolValue(value.Bool())
	} else {
		data.VoiceDomainPermission = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.neat"); value.Exists() {
		data.Neat = types.BoolValue(value.Bool())
	} else {
		data.Neat = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.webAuth"); value.Exists() {
		data.WebAuth = types.BoolValue(value.Bool())
	} else {
		data.WebAuth = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.macSecPolicy"); value.Exists() {
		data.MacSecPolicy = types.StringValue(value.String())
	} else {
		data.MacSecPolicy = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.reauth.connectivity"); value.Exists() {
		data.Connectivity = types.StringValue(value.String())
	} else {
		data.Connectivity = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.reauth.timer"); value.Exists() {
		data.Timer = types.Int64Value(value.Int())
	} else {
		data.Timer = types.Int64Null()
	}
	if value := res.Get("AuthorizationProfile.advancedAttributes"); value.Exists() {
		data.AdvancedAttributes = make([]AuthorizationProfileAdvancedAttributes, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := AuthorizationProfileAdvancedAttributes{}
			if cValue := v.Get("leftHandSideDictionaryAttribue.AdvancedAttributeValueType"); cValue.Exists() {
				item.Attribute1ValueType = types.StringValue(cValue.String())
			} else {
				item.Attribute1ValueType = types.StringNull()
			}
			if cValue := v.Get("leftHandSideDictionaryAttribue.dictionaryName"); cValue.Exists() {
				item.DictionaryName = types.StringValue(cValue.String())
			} else {
				item.DictionaryName = types.StringNull()
			}
			if cValue := v.Get("leftHandSideDictionaryAttribue.attributeName"); cValue.Exists() {
				item.AttributeName = types.StringValue(cValue.String())
			} else {
				item.AttributeName = types.StringNull()
			}
			if cValue := v.Get("rightHandSideAttribueValue.AdvancedAttributeValueType"); cValue.Exists() {
				item.Attribute2ValueType = types.StringValue(cValue.String())
			} else {
				item.Attribute2ValueType = types.StringNull()
			}
			if cValue := v.Get("rightHandSideAttribueValue.value"); cValue.Exists() {
				item.Value = types.StringValue(cValue.String())
			} else {
				item.Value = types.StringNull()
			}
			data.AdvancedAttributes = append(data.AdvancedAttributes, item)
			return true
		})
	}
	if value := res.Get("AuthorizationProfile.ipv6DaclName"); value.Exists() {
		data.Ipv6DaclName = types.StringValue(value.String())
	} else {
		data.Ipv6DaclName = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.airespaceIPv6ACL"); value.Exists() {
		data.AirespaceIpv6Acl = types.StringValue(value.String())
	} else {
		data.AirespaceIpv6Acl = types.StringNull()
	}
}

//template:end fromBody

//template:begin updateFromBody
func (data *AuthorizationProfile) updateFromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("AuthorizationProfile.name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.vlan.nameID"); value.Exists() && !data.NameId.IsNull() {
		data.NameId = types.StringValue(value.String())
	} else {
		data.NameId = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.vlan.tagID"); value.Exists() && !data.TagId.IsNull() {
		data.TagId = types.Int64Value(value.Int())
	} else {
		data.TagId = types.Int64Null()
	}
	if value := res.Get("AuthorizationProfile.webRedirection.WebRedirectionType"); value.Exists() && !data.WebRedirectionType.IsNull() {
		data.WebRedirectionType = types.StringValue(value.String())
	} else {
		data.WebRedirectionType = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.webRedirection.acl"); value.Exists() && !data.WebRedirectionAcl.IsNull() {
		data.WebRedirectionAcl = types.StringValue(value.String())
	} else {
		data.WebRedirectionAcl = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.webRedirection.portalName"); value.Exists() && !data.PortalName.IsNull() {
		data.PortalName = types.StringValue(value.String())
	} else {
		data.PortalName = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.webRedirection.staticIPHostNameFQDN"); value.Exists() && !data.StaticIpHostNameFqdn.IsNull() {
		data.StaticIpHostNameFqdn = types.StringValue(value.String())
	} else {
		data.StaticIpHostNameFqdn = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.webRedirection.displayCertificatesRenewalMessages"); value.Exists() && !data.DisplayCertificatesRenewalMessages.IsNull() {
		data.DisplayCertificatesRenewalMessages = types.BoolValue(value.Bool())
	} else {
		data.DisplayCertificatesRenewalMessages = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.accessType"); value.Exists() && !data.AccessType.IsNull() {
		data.AccessType = types.StringValue(value.String())
	} else {
		data.AccessType = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.authzProfileType"); value.Exists() && !data.AuthzProfileType.IsNull() {
		data.AuthzProfileType = types.StringValue(value.String())
	} else {
		data.AuthzProfileType = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.profileName"); value.Exists() && !data.ProfileName.IsNull() {
		data.ProfileName = types.StringValue(value.String())
	} else {
		data.ProfileName = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.airespaceACL"); value.Exists() && !data.AirespaceAcl.IsNull() {
		data.AirespaceAcl = types.StringValue(value.String())
	} else {
		data.AirespaceAcl = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.acl"); value.Exists() && !data.Acl.IsNull() {
		data.Acl = types.StringValue(value.String())
	} else {
		data.Acl = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.daclName"); value.Exists() && !data.DaclName.IsNull() {
		data.DaclName = types.StringValue(value.String())
	} else {
		data.DaclName = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.autoSmartPort"); value.Exists() && !data.AutoSmartPort.IsNull() {
		data.AutoSmartPort = types.StringValue(value.String())
	} else {
		data.AutoSmartPort = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.interfaceTemplate"); value.Exists() && !data.InterfaceTemplate.IsNull() {
		data.InterfaceTemplate = types.StringValue(value.String())
	} else {
		data.InterfaceTemplate = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.ipv6ACLFilter"); value.Exists() && !data.Ipv6AclFilter.IsNull() {
		data.Ipv6AclFilter = types.StringValue(value.String())
	} else {
		data.Ipv6AclFilter = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.avcProfile"); value.Exists() && !data.AvcProfile.IsNull() {
		data.AvcProfile = types.StringValue(value.String())
	} else {
		data.AvcProfile = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.asaVpn"); value.Exists() && !data.AsaVpn.IsNull() {
		data.AsaVpn = types.StringValue(value.String())
	} else {
		data.AsaVpn = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.uniqueIdentifier"); value.Exists() && !data.UniqueIdentifier.IsNull() {
		data.UniqueIdentifier = types.StringValue(value.String())
	} else {
		data.UniqueIdentifier = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.trackMovement"); value.Exists() && !data.TrackMovement.IsNull() {
		data.TrackMovement = types.BoolValue(value.Bool())
	} else {
		data.TrackMovement = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.serviceTemplate"); value.Exists() && !data.ServiceTemplate.IsNull() {
		data.ServiceTemplate = types.BoolValue(value.Bool())
	} else {
		data.ServiceTemplate = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.easywiredSessionCandidate"); value.Exists() && !data.EasywiredSessionCandidate.IsNull() {
		data.EasywiredSessionCandidate = types.BoolValue(value.Bool())
	} else {
		data.EasywiredSessionCandidate = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.voiceDomainPermission"); value.Exists() && !data.VoiceDomainPermission.IsNull() {
		data.VoiceDomainPermission = types.BoolValue(value.Bool())
	} else {
		data.VoiceDomainPermission = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.neat"); value.Exists() && !data.Neat.IsNull() {
		data.Neat = types.BoolValue(value.Bool())
	} else {
		data.Neat = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.webAuth"); value.Exists() && !data.WebAuth.IsNull() {
		data.WebAuth = types.BoolValue(value.Bool())
	} else {
		data.WebAuth = types.BoolNull()
	}
	if value := res.Get("AuthorizationProfile.macSecPolicy"); value.Exists() && !data.MacSecPolicy.IsNull() {
		data.MacSecPolicy = types.StringValue(value.String())
	} else {
		data.MacSecPolicy = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.reauth.connectivity"); value.Exists() && !data.Connectivity.IsNull() {
		data.Connectivity = types.StringValue(value.String())
	} else {
		data.Connectivity = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.reauth.timer"); value.Exists() && !data.Timer.IsNull() {
		data.Timer = types.Int64Value(value.Int())
	} else {
		data.Timer = types.Int64Null()
	}
	for i := range data.AdvancedAttributes {
		keys := [...]string{"leftHandSideDictionaryAttribue.AdvancedAttributeValueType"}
		keyValues := [...]string{data.AdvancedAttributes[i].Attribute1ValueType.ValueString()}

		var r gjson.Result
		res.Get("AuthorizationProfile.advancedAttributes").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("leftHandSideDictionaryAttribue.AdvancedAttributeValueType"); value.Exists() && !data.AdvancedAttributes[i].Attribute1ValueType.IsNull() {
			data.AdvancedAttributes[i].Attribute1ValueType = types.StringValue(value.String())
		} else {
			data.AdvancedAttributes[i].Attribute1ValueType = types.StringNull()
		}
		if value := r.Get("leftHandSideDictionaryAttribue.dictionaryName"); value.Exists() && !data.AdvancedAttributes[i].DictionaryName.IsNull() {
			data.AdvancedAttributes[i].DictionaryName = types.StringValue(value.String())
		} else {
			data.AdvancedAttributes[i].DictionaryName = types.StringNull()
		}
		if value := r.Get("leftHandSideDictionaryAttribue.attributeName"); value.Exists() && !data.AdvancedAttributes[i].AttributeName.IsNull() {
			data.AdvancedAttributes[i].AttributeName = types.StringValue(value.String())
		} else {
			data.AdvancedAttributes[i].AttributeName = types.StringNull()
		}
		if value := r.Get("rightHandSideAttribueValue.AdvancedAttributeValueType"); value.Exists() && !data.AdvancedAttributes[i].Attribute2ValueType.IsNull() {
			data.AdvancedAttributes[i].Attribute2ValueType = types.StringValue(value.String())
		} else {
			data.AdvancedAttributes[i].Attribute2ValueType = types.StringNull()
		}
		if value := r.Get("rightHandSideAttribueValue.value"); value.Exists() && !data.AdvancedAttributes[i].Value.IsNull() {
			data.AdvancedAttributes[i].Value = types.StringValue(value.String())
		} else {
			data.AdvancedAttributes[i].Value = types.StringNull()
		}
	}
	if value := res.Get("AuthorizationProfile.ipv6DaclName"); value.Exists() && !data.Ipv6DaclName.IsNull() {
		data.Ipv6DaclName = types.StringValue(value.String())
	} else {
		data.Ipv6DaclName = types.StringNull()
	}
	if value := res.Get("AuthorizationProfile.airespaceIPv6ACL"); value.Exists() && !data.AirespaceIpv6Acl.IsNull() {
		data.AirespaceIpv6Acl = types.StringValue(value.String())
	} else {
		data.AirespaceIpv6Acl = types.StringNull()
	}
}

//template:end updateFromBody
