// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"
	"fmt"
	"net/url"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

//template:begin types
type ActiveDirectoryGroupsByDomain struct {
	JoinPointId types.String                          `tfsdk:"join_point_id"`
	Domain      types.String                          `tfsdk:"domain"`
	Filter      types.String                          `tfsdk:"filter"`
	SidFilter   types.String                          `tfsdk:"sid_filter"`
	TypeFilter  types.String                          `tfsdk:"type_filter"`
	Groups      []ActiveDirectoryGroupsByDomainGroups `tfsdk:"groups"`
}

type ActiveDirectoryGroupsByDomainGroups struct {
	Name types.String `tfsdk:"name"`
	Sid  types.String `tfsdk:"sid"`
	Type types.String `tfsdk:"type"`
}

//template:end types

//template:begin getPath
func (data ActiveDirectoryGroupsByDomain) getPath() string {
	return fmt.Sprintf("/ers/config/activedirectory/%v/getGroupsByDomain", url.QueryEscape(data.JoinPointId.ValueString()))
}

//template:end getPath

//template:begin getPathDelete

//template:end getPathDelete

func (data ActiveDirectoryGroupsByDomain) toBody(ctx context.Context, state ActiveDirectoryGroupsByDomain) string {
	body := ""
	if !data.Domain.IsNull() {
		itemBody, _ := sjson.Set("", "name", "domain")
		itemBody, _ = sjson.Set(itemBody, "value", data.Domain.ValueString())
		body, _ = sjson.SetRaw(body, "OperationAdditionalData.additionalData.-1", itemBody)
	}
	if !data.Filter.IsNull() {
		itemBody, _ := sjson.Set("", "name", "filter")
		itemBody, _ = sjson.Set(itemBody, "value", data.Filter.ValueString())
		body, _ = sjson.SetRaw(body, "OperationAdditionalData.additionalData.-1", itemBody)
	}
	if !data.SidFilter.IsNull() {
		itemBody, _ := sjson.Set("", "name", "sidFilter")
		itemBody, _ = sjson.Set(itemBody, "value", data.SidFilter.ValueString())
		body, _ = sjson.SetRaw(body, "OperationAdditionalData.additionalData.-1", itemBody)
	}
	if !data.TypeFilter.IsNull() {
		itemBody, _ := sjson.Set("", "name", "typeFilter")
		itemBody, _ = sjson.Set(itemBody, "value", data.TypeFilter.ValueString())
		body, _ = sjson.SetRaw(body, "OperationAdditionalData.additionalData.-1", itemBody)
	}
	return body
}

func (data *ActiveDirectoryGroupsByDomain) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("ERSActiveDirectoryGroups.groups"); value.Exists() {
		data.Groups = make([]ActiveDirectoryGroupsByDomainGroups, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := ActiveDirectoryGroupsByDomainGroups{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			} else {
				item.Name = types.StringNull()
			}
			if cValue := v.Get("sid"); cValue.Exists() {
				item.Sid = types.StringValue(cValue.String())
			} else {
				item.Sid = types.StringNull()
			}
			if cValue := v.Get("type"); cValue.Exists() {
				item.Type = types.StringValue(cValue.String())
			} else {
				item.Type = types.StringNull()
			}
			data.Groups = append(data.Groups, item)
			return true
		})
	}
}
