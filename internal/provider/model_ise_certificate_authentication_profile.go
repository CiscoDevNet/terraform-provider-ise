// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type CertificateAuthenticationProfile struct {
	Id                        types.String `tfsdk:"id"`
	Name                      types.String `tfsdk:"name"`
	Description               types.String `tfsdk:"description"`
	AllowedAsUserName         types.Bool   `tfsdk:"allowed_as_user_name"`
	ExternalIdentityStoreName types.String `tfsdk:"external_identity_store_name"`
	CertificateAttributeName  types.String `tfsdk:"certificate_attribute_name"`
	MatchMode                 types.String `tfsdk:"match_mode"`
	UsernameFrom              types.String `tfsdk:"username_from"`
}

func (data CertificateAuthenticationProfile) toBody(ctx context.Context, state CertificateAuthenticationProfile) string {
	body := ""
	if !data.Name.IsNull() {
		body, _ = sjson.Set(body, "CertificateProfile.name", data.Name.ValueString())
	}
	if !data.Description.IsNull() {
		body, _ = sjson.Set(body, "CertificateProfile.description", data.Description.ValueString())
	}
	if !data.AllowedAsUserName.IsNull() {
		body, _ = sjson.Set(body, "CertificateProfile.allowedAsUserName", data.AllowedAsUserName.ValueBool())
	}
	if !data.ExternalIdentityStoreName.IsNull() {
		body, _ = sjson.Set(body, "CertificateProfile.externalIdentityStoreName", data.ExternalIdentityStoreName.ValueString())
	}
	if !data.CertificateAttributeName.IsNull() {
		body, _ = sjson.Set(body, "CertificateProfile.certificateAttributeName", data.CertificateAttributeName.ValueString())
	}
	if !data.MatchMode.IsNull() {
		body, _ = sjson.Set(body, "CertificateProfile.matchMode", data.MatchMode.ValueString())
	}
	if !data.UsernameFrom.IsNull() {
		body, _ = sjson.Set(body, "CertificateProfile.usernameFrom", data.UsernameFrom.ValueString())
	}
	return body
}

func (data *CertificateAuthenticationProfile) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("CertificateProfile.name"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("CertificateProfile.description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("CertificateProfile.allowedAsUserName"); value.Exists() {
		data.AllowedAsUserName = types.BoolValue(value.Bool())
	} else {
		data.AllowedAsUserName = types.BoolNull()
	}
	if value := res.Get("CertificateProfile.externalIdentityStoreName"); value.Exists() {
		data.ExternalIdentityStoreName = types.StringValue(value.String())
	} else {
		data.ExternalIdentityStoreName = types.StringNull()
	}
	if value := res.Get("CertificateProfile.certificateAttributeName"); value.Exists() {
		data.CertificateAttributeName = types.StringValue(value.String())
	} else {
		data.CertificateAttributeName = types.StringNull()
	}
	if value := res.Get("CertificateProfile.matchMode"); value.Exists() {
		data.MatchMode = types.StringValue(value.String())
	} else {
		data.MatchMode = types.StringNull()
	}
	if value := res.Get("CertificateProfile.usernameFrom"); value.Exists() {
		data.UsernameFrom = types.StringValue(value.String())
	} else {
		data.UsernameFrom = types.StringNull()
	}
}

func (data *CertificateAuthenticationProfile) updateFromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("CertificateProfile.name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("CertificateProfile.description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("CertificateProfile.allowedAsUserName"); value.Exists() && !data.AllowedAsUserName.IsNull() {
		data.AllowedAsUserName = types.BoolValue(value.Bool())
	} else {
		data.AllowedAsUserName = types.BoolNull()
	}
	if value := res.Get("CertificateProfile.externalIdentityStoreName"); value.Exists() && !data.ExternalIdentityStoreName.IsNull() {
		data.ExternalIdentityStoreName = types.StringValue(value.String())
	} else {
		data.ExternalIdentityStoreName = types.StringNull()
	}
	if value := res.Get("CertificateProfile.certificateAttributeName"); value.Exists() && !data.CertificateAttributeName.IsNull() {
		data.CertificateAttributeName = types.StringValue(value.String())
	} else {
		data.CertificateAttributeName = types.StringNull()
	}
	if value := res.Get("CertificateProfile.matchMode"); value.Exists() && !data.MatchMode.IsNull() {
		data.MatchMode = types.StringValue(value.String())
	} else {
		data.MatchMode = types.StringNull()
	}
	if value := res.Get("CertificateProfile.usernameFrom"); value.Exists() && !data.UsernameFrom.IsNull() {
		data.UsernameFrom = types.StringValue(value.String())
	} else {
		data.UsernameFrom = types.StringNull()
	}
}
