// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

//template:end imports

//template:begin testAcc
func TestAccIseAuthorizationProfile(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "name", "AuthzProfile1"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "description", "My Authorization Profile"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "name_id", "VLAN10"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "tag_id", "0"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "web_redirection_type", "CentralizedWebAuth"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "web_redirection_acl", "TEST_ACL"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "portal_name", "Sponsored Guest Portal (default)"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "display_certificates_renewal_messages", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "access_type", "ACCESS_ACCEPT"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "authz_profile_type", "SWITCH"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "profile_name", "Cisco"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "asa_vpn", ""))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "unique_identifier", ""))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "track_movement", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "service_template", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "easywired_session_candidate", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "connectivity", "DEFAULT"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "timer", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "advanced_attributes.0.attribute_1_value_type", "AdvancedDictionaryAttribute"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "advanced_attributes.0.dictionary_name", "Cisco"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "advanced_attributes.0.attribute_name", "cisco-av-pair"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "advanced_attributes.0.attribute_2_value_type", "AttributeValue"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_authorization_profile.test", "advanced_attributes.0.value", "set_nadprofile_vlan=true,vlan=TEST,tag=1"))

	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccIseAuthorizationProfileConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccIseAuthorizationProfileConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName: "ise_authorization_profile.test",
		ImportState:  true,
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

//template:end testAcc

//template:begin testPrerequisites
//template:end testPrerequisites

//template:begin testAccConfigMinimal
func testAccIseAuthorizationProfileConfig_minimum() string {
	config := `resource "ise_authorization_profile" "test" {` + "\n"
	config += `	name = "AuthzProfile1"` + "\n"
	config += `	name_id = "VLAN10"` + "\n"
	config += `	tag_id = 0` + "\n"
	config += `	web_redirection_type = "CentralizedWebAuth"` + "\n"
	config += `	web_redirection_acl = "TEST_ACL"` + "\n"
	config += `	portal_name = "Sponsored Guest Portal (default)"` + "\n"
	config += `	connectivity = "DEFAULT"` + "\n"
	config += `	timer = 1` + "\n"
	config += `}` + "\n"
	return config
}

//template:end testAccConfigMinimal

//template:begin testAccConfigAll
func testAccIseAuthorizationProfileConfig_all() string {
	config := `resource "ise_authorization_profile" "test" {` + "\n"
	config += `	name = "AuthzProfile1"` + "\n"
	config += `	description = "My Authorization Profile"` + "\n"
	config += `	name_id = "VLAN10"` + "\n"
	config += `	tag_id = 0` + "\n"
	config += `	web_redirection_type = "CentralizedWebAuth"` + "\n"
	config += `	web_redirection_acl = "TEST_ACL"` + "\n"
	config += `	portal_name = "Sponsored Guest Portal (default)"` + "\n"
	config += `	display_certificates_renewal_messages = true` + "\n"
	config += `	access_type = "ACCESS_ACCEPT"` + "\n"
	config += `	authz_profile_type = "SWITCH"` + "\n"
	config += `	profile_name = "Cisco"` + "\n"
	config += `	asa_vpn = ""` + "\n"
	config += `	unique_identifier = ""` + "\n"
	config += `	track_movement = false` + "\n"
	config += `	service_template = false` + "\n"
	config += `	easywired_session_candidate = false` + "\n"
	config += `	connectivity = "DEFAULT"` + "\n"
	config += `	timer = 1` + "\n"
	config += `	advanced_attributes = [{` + "\n"
	config += `	  attribute_1_value_type = "AdvancedDictionaryAttribute"` + "\n"
	config += `	  dictionary_name = "Cisco"` + "\n"
	config += `	  attribute_name = "cisco-av-pair"` + "\n"
	config += `	  attribute_2_value_type = "AttributeValue"` + "\n"
	config += `	  value = "set_nadprofile_vlan=true,vlan=TEST,tag=1"` + "\n"
	config += `	}]` + "\n"
	config += `}` + "\n"
	return config
}

//template:end testAccConfigAll
