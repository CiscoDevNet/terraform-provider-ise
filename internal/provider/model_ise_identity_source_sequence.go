// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

//template:begin types
type IdentitySourceSequence struct {
	Id                               types.String                            `tfsdk:"id"`
	Name                             types.String                            `tfsdk:"name"`
	Description                      types.String                            `tfsdk:"description"`
	BreakOnStoreFail                 types.Bool                              `tfsdk:"break_on_store_fail"`
	CertificateAuthenticationProfile types.String                            `tfsdk:"certificate_authentication_profile"`
	IdentitySources                  []IdentitySourceSequenceIdentitySources `tfsdk:"identity_sources"`
}

type IdentitySourceSequenceIdentitySources struct {
	Name  types.String `tfsdk:"name"`
	Order types.Int64  `tfsdk:"order"`
}

//template:end types

//template:begin getPath
func (data IdentitySourceSequence) getPath() string {
	return "/ers/config/idstoresequence"
}

//template:end getPath

//template:begin getPathDelete

//template:end getPathDelete

//template:begin toBody
func (data IdentitySourceSequence) toBody(ctx context.Context, state IdentitySourceSequence) string {
	body := ""
	if !data.Name.IsNull() {
		body, _ = sjson.Set(body, "IdStoreSequence.name", data.Name.ValueString())
	}
	if !data.Description.IsNull() {
		body, _ = sjson.Set(body, "IdStoreSequence.description", data.Description.ValueString())
	}
	if !data.BreakOnStoreFail.IsNull() {
		body, _ = sjson.Set(body, "IdStoreSequence.breakOnStoreFail", data.BreakOnStoreFail.ValueBool())
	}
	if !data.CertificateAuthenticationProfile.IsNull() {
		body, _ = sjson.Set(body, "IdStoreSequence.certificateAuthenticationProfile", data.CertificateAuthenticationProfile.ValueString())
	}
	if len(data.IdentitySources) > 0 {
		body, _ = sjson.Set(body, "IdStoreSequence.idSeqItem", []interface{}{})
		for _, item := range data.IdentitySources {
			itemBody := ""
			if !item.Name.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "idstore", item.Name.ValueString())
			}
			if !item.Order.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "order", item.Order.ValueInt64())
			}
			body, _ = sjson.SetRaw(body, "IdStoreSequence.idSeqItem.-1", itemBody)
		}
	}
	return body
}

//template:end toBody

//template:begin fromBody
func (data *IdentitySourceSequence) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("IdStoreSequence.name"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("IdStoreSequence.description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("IdStoreSequence.breakOnStoreFail"); value.Exists() {
		data.BreakOnStoreFail = types.BoolValue(value.Bool())
	} else {
		data.BreakOnStoreFail = types.BoolNull()
	}
	if value := res.Get("IdStoreSequence.certificateAuthenticationProfile"); value.Exists() {
		data.CertificateAuthenticationProfile = types.StringValue(value.String())
	} else {
		data.CertificateAuthenticationProfile = types.StringNull()
	}
	if value := res.Get("IdStoreSequence.idSeqItem"); value.Exists() {
		data.IdentitySources = make([]IdentitySourceSequenceIdentitySources, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := IdentitySourceSequenceIdentitySources{}
			if cValue := v.Get("idstore"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			} else {
				item.Name = types.StringNull()
			}
			if cValue := v.Get("order"); cValue.Exists() {
				item.Order = types.Int64Value(cValue.Int())
			} else {
				item.Order = types.Int64Null()
			}
			data.IdentitySources = append(data.IdentitySources, item)
			return true
		})
	}
}

//template:end fromBody

//template:begin updateFromBody
func (data *IdentitySourceSequence) updateFromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("IdStoreSequence.name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("IdStoreSequence.description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("IdStoreSequence.breakOnStoreFail"); value.Exists() && !data.BreakOnStoreFail.IsNull() {
		data.BreakOnStoreFail = types.BoolValue(value.Bool())
	} else {
		data.BreakOnStoreFail = types.BoolNull()
	}
	if value := res.Get("IdStoreSequence.certificateAuthenticationProfile"); value.Exists() && !data.CertificateAuthenticationProfile.IsNull() {
		data.CertificateAuthenticationProfile = types.StringValue(value.String())
	} else {
		data.CertificateAuthenticationProfile = types.StringNull()
	}
	for i := range data.IdentitySources {
		keys := [...]string{"idstore", "order"}
		keyValues := [...]string{data.IdentitySources[i].Name.ValueString(), strconv.FormatInt(data.IdentitySources[i].Order.ValueInt64(), 10)}

		var r gjson.Result
		res.Get("IdStoreSequence.idSeqItem").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("idstore"); value.Exists() && !data.IdentitySources[i].Name.IsNull() {
			data.IdentitySources[i].Name = types.StringValue(value.String())
		} else {
			data.IdentitySources[i].Name = types.StringNull()
		}
		if value := r.Get("order"); value.Exists() && !data.IdentitySources[i].Order.IsNull() {
			data.IdentitySources[i].Order = types.Int64Value(value.Int())
		} else {
			data.IdentitySources[i].Order = types.Int64Null()
		}
	}
}

//template:end updateFromBody

//template:begin isNull
func (data *IdentitySourceSequence) isNull(ctx context.Context, res gjson.Result) bool {
	if !data.Name.IsNull() {
		return false
	}
	if !data.Description.IsNull() {
		return false
	}
	if !data.BreakOnStoreFail.IsNull() {
		return false
	}
	if !data.CertificateAuthenticationProfile.IsNull() {
		return false
	}
	if len(data.IdentitySources) > 0 {
		return false
	}
	return true
}

//template:end isNull
