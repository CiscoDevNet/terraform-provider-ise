// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

//template:end imports

//template:begin testAcc
func TestAccIseAllowedProtocols(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "name", "Protocols1"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "description", "My allowed protocols"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "process_host_lookup", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_pap_ascii", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_chap", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_ms_chap_v1", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_ms_chap_v2", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_eap_md5", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_leap", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_eap_tls", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_eap_ttls", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_eap_fast", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_peap", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_teap", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_preferred_eap_protocol", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "preferred_eap_protocol", "LEAP"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_tls_l_bit", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_weak_ciphers_for_eap", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "require_message_auth", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_tls_allow_auth_of_expired_certs", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_tls_enable_stateless_session_resume", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_tls_session_ticket_ttl", "5"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_tls_session_ticket_ttl_unit", "DAYS"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_tls_session_ticket_percentage", "5"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "peap_allow_peap_eap_ms_chap_v2", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "peap_allow_peap_eap_ms_chap_v2_pwd_change", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "peap_allow_peap_eap_ms_chap_v2_pwd_change_retries", "3"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "peap_allow_peap_eap_gtc", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "peap_allow_peap_eap_gtc_pwd_change", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "peap_allow_peap_eap_gtc_pwd_change_retries", "3"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "peap_allow_peap_eap_tls", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "peap_allow_peap_eap_tls_auth_of_expired_certs", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "require_cryptobinding", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "peap_peap_v0", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_ttls_pap_ascii", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_ttls_chap", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_ttls_ms_chap_v1", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_ttls_ms_chap_v2", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_ttls_eap_md5", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_ttls_eap_ms_chap_v2", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_ttls_eap_ms_chap_v2_pwd_change", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_ttls_eap_ms_chap_v2_pwd_change_retries", "3"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_eap_ms_chap_v2", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_eap_ms_chap_v2_pwd_change", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_eap_ms_chap_v2_pwd_change_retries", "3"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_eap_gtc", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_eap_gtc_pwd_change", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_eap_gtc_pwd_change_retries", "3"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_eap_tls", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_eap_tls_auth_of_expired_certs", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_enable_eap_chaining", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_use_pacs", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_tunnel_pac_ttl", "5"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_tunnel_pac_ttl_unit", "DAYS"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_use_proactive_pac_update_percentage", "5"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_allow_anonymous_provisioning", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_allow_authenticated_provisioning", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_server_returns", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_allow_client_cert", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_allow_machine_authentication", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_machine_pac_ttl", "5"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_machine_pac_ttl_unit", "DAYS"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_stateless_session_resume", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_authorization_pac_ttl", "5"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "eap_fast_pacs_authorization_pac_ttl_unit", "HOURS"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "teap_eap_ms_chap_v2", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "teap_eap_ms_chap_v2_pwd_change", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "teap_eap_ms_chap_v2_pwd_change_retries", "3"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "teap_eap_tls", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "teap_eap_tls_auth_of_expired_certs", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "teap_eap_accept_client_cert_during_tunnel_est", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "teap_eap_chaining", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "teap_downgrade_msk", "true"))
	if os.Getenv("ISE32") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("ise_allowed_protocols.test", "allow_5g", "true"))
	}

	var steps []resource.TestStep
	steps = append(steps, resource.TestStep{
		Config: testAccIseAllowedProtocolsConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})
	steps = append(steps, resource.TestStep{
		ResourceName: "ise_allowed_protocols.test",
		ImportState:  true,
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps:                    steps,
	})
}

//template:end testAcc

//template:begin testPrerequisites
//template:end testPrerequisites

//template:begin testAccConfigMinimal
func testAccIseAllowedProtocolsConfig_minimum() string {
	config := `resource "ise_allowed_protocols" "test" {` + "\n"
	config += `	name = "Protocols1"` + "\n"
	config += `	process_host_lookup = true` + "\n"
	config += `	allow_pap_ascii = true` + "\n"
	config += `	allow_chap = true` + "\n"
	config += `	allow_ms_chap_v1 = true` + "\n"
	config += `	allow_ms_chap_v2 = true` + "\n"
	config += `	allow_eap_md5 = true` + "\n"
	config += `	allow_leap = true` + "\n"
	config += `	allow_eap_tls = false` + "\n"
	config += `	allow_eap_ttls = false` + "\n"
	config += `	allow_eap_fast = false` + "\n"
	config += `	allow_peap = false` + "\n"
	config += `	allow_teap = false` + "\n"
	config += `	allow_preferred_eap_protocol = false` + "\n"
	config += `	eap_tls_l_bit = true` + "\n"
	config += `	allow_weak_ciphers_for_eap = true` + "\n"
	config += `	require_message_auth = true` + "\n"
	if os.Getenv("ISE32") != "" {
		config += `	allow_5g = true` + "\n"
	}
	config += `}` + "\n"
	return config
}

//template:end testAccConfigMinimal

//template:begin testAccConfigAll
func testAccIseAllowedProtocolsConfig_all() string {
	config := `resource "ise_allowed_protocols" "test" {` + "\n"
	config += `	name = "Protocols1"` + "\n"
	config += `	description = "My allowed protocols"` + "\n"
	config += `	process_host_lookup = true` + "\n"
	config += `	allow_pap_ascii = true` + "\n"
	config += `	allow_chap = true` + "\n"
	config += `	allow_ms_chap_v1 = true` + "\n"
	config += `	allow_ms_chap_v2 = true` + "\n"
	config += `	allow_eap_md5 = true` + "\n"
	config += `	allow_leap = true` + "\n"
	config += `	allow_eap_tls = true` + "\n"
	config += `	allow_eap_ttls = true` + "\n"
	config += `	allow_eap_fast = true` + "\n"
	config += `	allow_peap = true` + "\n"
	config += `	allow_teap = true` + "\n"
	config += `	allow_preferred_eap_protocol = true` + "\n"
	config += `	preferred_eap_protocol = "LEAP"` + "\n"
	config += `	eap_tls_l_bit = true` + "\n"
	config += `	allow_weak_ciphers_for_eap = true` + "\n"
	config += `	require_message_auth = true` + "\n"
	config += `	eap_tls_allow_auth_of_expired_certs = true` + "\n"
	config += `	eap_tls_enable_stateless_session_resume = true` + "\n"
	config += `	eap_tls_session_ticket_ttl = 5` + "\n"
	config += `	eap_tls_session_ticket_ttl_unit = "DAYS"` + "\n"
	config += `	eap_tls_session_ticket_percentage = 5` + "\n"
	config += `	peap_allow_peap_eap_ms_chap_v2 = true` + "\n"
	config += `	peap_allow_peap_eap_ms_chap_v2_pwd_change = true` + "\n"
	config += `	peap_allow_peap_eap_ms_chap_v2_pwd_change_retries = 3` + "\n"
	config += `	peap_allow_peap_eap_gtc = true` + "\n"
	config += `	peap_allow_peap_eap_gtc_pwd_change = true` + "\n"
	config += `	peap_allow_peap_eap_gtc_pwd_change_retries = 3` + "\n"
	config += `	peap_allow_peap_eap_tls = true` + "\n"
	config += `	peap_allow_peap_eap_tls_auth_of_expired_certs = true` + "\n"
	config += `	require_cryptobinding = true` + "\n"
	config += `	peap_peap_v0 = true` + "\n"
	config += `	eap_ttls_pap_ascii = true` + "\n"
	config += `	eap_ttls_chap = true` + "\n"
	config += `	eap_ttls_ms_chap_v1 = true` + "\n"
	config += `	eap_ttls_ms_chap_v2 = true` + "\n"
	config += `	eap_ttls_eap_md5 = true` + "\n"
	config += `	eap_ttls_eap_ms_chap_v2 = true` + "\n"
	config += `	eap_ttls_eap_ms_chap_v2_pwd_change = true` + "\n"
	config += `	eap_ttls_eap_ms_chap_v2_pwd_change_retries = 3` + "\n"
	config += `	eap_fast_eap_ms_chap_v2 = true` + "\n"
	config += `	eap_fast_eap_ms_chap_v2_pwd_change = true` + "\n"
	config += `	eap_fast_eap_ms_chap_v2_pwd_change_retries = 3` + "\n"
	config += `	eap_fast_eap_gtc = true` + "\n"
	config += `	eap_fast_eap_gtc_pwd_change = true` + "\n"
	config += `	eap_fast_eap_gtc_pwd_change_retries = 3` + "\n"
	config += `	eap_fast_eap_tls = true` + "\n"
	config += `	eap_fast_eap_tls_auth_of_expired_certs = true` + "\n"
	config += `	eap_fast_enable_eap_chaining = true` + "\n"
	config += `	eap_fast_use_pacs = true` + "\n"
	config += `	eap_fast_pacs_tunnel_pac_ttl = 5` + "\n"
	config += `	eap_fast_pacs_tunnel_pac_ttl_unit = "DAYS"` + "\n"
	config += `	eap_fast_pacs_use_proactive_pac_update_percentage = 5` + "\n"
	config += `	eap_fast_pacs_allow_anonymous_provisioning = true` + "\n"
	config += `	eap_fast_pacs_allow_authenticated_provisioning = true` + "\n"
	config += `	eap_fast_pacs_server_returns = true` + "\n"
	config += `	eap_fast_pacs_allow_client_cert = true` + "\n"
	config += `	eap_fast_pacs_allow_machine_authentication = true` + "\n"
	config += `	eap_fast_pacs_machine_pac_ttl = 5` + "\n"
	config += `	eap_fast_pacs_machine_pac_ttl_unit = "DAYS"` + "\n"
	config += `	eap_fast_pacs_stateless_session_resume = true` + "\n"
	config += `	eap_fast_pacs_authorization_pac_ttl = 5` + "\n"
	config += `	eap_fast_pacs_authorization_pac_ttl_unit = "HOURS"` + "\n"
	config += `	teap_eap_ms_chap_v2 = true` + "\n"
	config += `	teap_eap_ms_chap_v2_pwd_change = true` + "\n"
	config += `	teap_eap_ms_chap_v2_pwd_change_retries = 3` + "\n"
	config += `	teap_eap_tls = true` + "\n"
	config += `	teap_eap_tls_auth_of_expired_certs = true` + "\n"
	config += `	teap_eap_accept_client_cert_during_tunnel_est = true` + "\n"
	config += `	teap_eap_chaining = true` + "\n"
	config += `	teap_downgrade_msk = true` + "\n"
	config += `	teap_request_basic_pwd_auth = true` + "\n"
	if os.Getenv("ISE32") != "" {
		config += `	allow_5g = true` + "\n"
	}
	config += `}` + "\n"
	return config
}

//template:end testAccConfigAll
