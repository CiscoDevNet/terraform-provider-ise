// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"
	"fmt"
	"net/url"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

//template:begin types
type ActiveDirectoryAddGroups struct {
	Id                      types.String                     `tfsdk:"id"`
	JoinPointId             types.String                     `tfsdk:"join_point_id"`
	Name                    types.String                     `tfsdk:"name"`
	Description             types.String                     `tfsdk:"description"`
	Domain                  types.String                     `tfsdk:"domain"`
	AdScopesNames           types.String                     `tfsdk:"ad_scopes_names"`
	EnableDomainAllowedList types.Bool                       `tfsdk:"enable_domain_allowed_list"`
	Groups                  []ActiveDirectoryAddGroupsGroups `tfsdk:"groups"`
}

type ActiveDirectoryAddGroupsGroups struct {
	Name types.String `tfsdk:"name"`
	Sid  types.String `tfsdk:"sid"`
	Type types.String `tfsdk:"type"`
}

//template:end types

//template:begin getPath
func (data ActiveDirectoryAddGroups) getPath() string {
	return fmt.Sprintf("/ers/config/activedirectory/%v/addGroups", url.QueryEscape(data.JoinPointId.ValueString()))
}

//template:end getPath

//template:begin getPathDelete

//template:end getPathDelete

//template:begin toBody
func (data ActiveDirectoryAddGroups) toBody(ctx context.Context, state ActiveDirectoryAddGroups) string {
	body := ""
	if !data.Name.IsNull() {
		body, _ = sjson.Set(body, "ERSActiveDirectory.name", data.Name.ValueString())
	}
	if !data.Description.IsNull() {
		body, _ = sjson.Set(body, "ERSActiveDirectory.description", data.Description.ValueString())
	}
	if !data.Domain.IsNull() {
		body, _ = sjson.Set(body, "ERSActiveDirectory.domain", data.Domain.ValueString())
	}
	if !data.AdScopesNames.IsNull() {
		body, _ = sjson.Set(body, "ERSActiveDirectory.adScopesNames", data.AdScopesNames.ValueString())
	}
	if !data.EnableDomainAllowedList.IsNull() {
		body, _ = sjson.Set(body, "ERSActiveDirectory.enableDomainAllowedList", data.EnableDomainAllowedList.ValueBool())
	}
	if len(data.Groups) > 0 {
		body, _ = sjson.Set(body, "ERSActiveDirectory.adgroups.groups", []interface{}{})
		for _, item := range data.Groups {
			itemBody := ""
			if !item.Name.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "name", item.Name.ValueString())
			}
			if !item.Sid.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "sid", item.Sid.ValueString())
			}
			if !item.Type.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "type", item.Type.ValueString())
			}
			body, _ = sjson.SetRaw(body, "ERSActiveDirectory.adgroups.groups.-1", itemBody)
		}
	}
	return body
}

//template:end toBody

//template:begin fromBody
func (data *ActiveDirectoryAddGroups) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("ERSActiveDirectory.name"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("ERSActiveDirectory.description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("ERSActiveDirectory.domain"); value.Exists() {
		data.Domain = types.StringValue(value.String())
	} else {
		data.Domain = types.StringNull()
	}
	if value := res.Get("ERSActiveDirectory.adScopesNames"); value.Exists() {
		data.AdScopesNames = types.StringValue(value.String())
	} else {
		data.AdScopesNames = types.StringValue("Default_Scope")
	}
	if value := res.Get("ERSActiveDirectory.enableDomainAllowedList"); value.Exists() {
		data.EnableDomainAllowedList = types.BoolValue(value.Bool())
	} else {
		data.EnableDomainAllowedList = types.BoolValue(true)
	}
	if value := res.Get("ERSActiveDirectory.adgroups.groups"); value.Exists() {
		data.Groups = make([]ActiveDirectoryAddGroupsGroups, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := ActiveDirectoryAddGroupsGroups{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			} else {
				item.Name = types.StringNull()
			}
			if cValue := v.Get("sid"); cValue.Exists() {
				item.Sid = types.StringValue(cValue.String())
			} else {
				item.Sid = types.StringNull()
			}
			data.Groups = append(data.Groups, item)
			return true
		})
	}
}

//template:end fromBody

//template:begin updateFromBody
func (data *ActiveDirectoryAddGroups) updateFromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("ERSActiveDirectory.name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("ERSActiveDirectory.description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("ERSActiveDirectory.domain"); value.Exists() && !data.Domain.IsNull() {
		data.Domain = types.StringValue(value.String())
	} else {
		data.Domain = types.StringNull()
	}
	if value := res.Get("ERSActiveDirectory.adScopesNames"); value.Exists() && !data.AdScopesNames.IsNull() {
		data.AdScopesNames = types.StringValue(value.String())
	} else if data.AdScopesNames.ValueString() != "Default_Scope" {
		data.AdScopesNames = types.StringNull()
	}
	if value := res.Get("ERSActiveDirectory.enableDomainAllowedList"); value.Exists() && !data.EnableDomainAllowedList.IsNull() {
		data.EnableDomainAllowedList = types.BoolValue(value.Bool())
	} else if data.EnableDomainAllowedList.ValueBool() != true {
		data.EnableDomainAllowedList = types.BoolNull()
	}
	for i := range data.Groups {
		keys := [...]string{"sid"}
		keyValues := [...]string{data.Groups[i].Sid.ValueString()}

		var r gjson.Result
		res.Get("ERSActiveDirectory.adgroups.groups").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() && !data.Groups[i].Name.IsNull() {
			data.Groups[i].Name = types.StringValue(value.String())
		} else {
			data.Groups[i].Name = types.StringNull()
		}
		if value := r.Get("sid"); value.Exists() && !data.Groups[i].Sid.IsNull() {
			data.Groups[i].Sid = types.StringValue(value.String())
		} else {
			data.Groups[i].Sid = types.StringNull()
		}
	}
}

//template:end updateFromBody

//template:begin isNull
func (data *ActiveDirectoryAddGroups) isNull(ctx context.Context, res gjson.Result) bool {
	if !data.Name.IsNull() {
		return false
	}
	if !data.Description.IsNull() {
		return false
	}
	if !data.Domain.IsNull() {
		return false
	}
	if !data.AdScopesNames.IsNull() {
		return false
	}
	if !data.EnableDomainAllowedList.IsNull() {
		return false
	}
	if len(data.Groups) > 0 {
		return false
	}
	return true
}

//template:end isNull
