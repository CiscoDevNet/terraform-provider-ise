// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework-validators/datasourcevalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-ise"
	"github.com/tidwall/gjson"
)

//template:end imports

//template:begin model

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &NetworkAccessPolicySetDataSource{}
	_ datasource.DataSourceWithConfigure = &NetworkAccessPolicySetDataSource{}
)

func NewNetworkAccessPolicySetDataSource() datasource.DataSource {
	return &NetworkAccessPolicySetDataSource{}
}

type NetworkAccessPolicySetDataSource struct {
	client *ise.Client
}

func (d *NetworkAccessPolicySetDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_network_access_policy_set"
}

func (d *NetworkAccessPolicySetDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Network Access Policy Set.",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "The id of the object",
				Optional:            true,
				Computed:            true,
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses]",
				Optional:            true,
				Computed:            true,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: "The description of the policy set",
				Computed:            true,
			},
			"is_proxy": schema.BoolAttribute{
				MarkdownDescription: "Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols'",
				Computed:            true,
			},
			"rank": schema.Int64Attribute{
				MarkdownDescription: "The rank (priority) in relation to other policy sets. Lower rank is higher priority.",
				Computed:            true,
			},
			"service_name": schema.StringAttribute{
				MarkdownDescription: "Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'.",
				Computed:            true,
			},
			"state": schema.StringAttribute{
				MarkdownDescription: "The state that the policy set is in. A disabled policy set cannot be matched.",
				Computed:            true,
			},
			"condition_type": schema.StringAttribute{
				MarkdownDescription: "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.",
				Computed:            true,
			},
			"condition_id": schema.StringAttribute{
				MarkdownDescription: "UUID for condition",
				Computed:            true,
			},
			"condition_is_negate": schema.BoolAttribute{
				MarkdownDescription: "Indicates whereas this condition is in negate mode",
				Computed:            true,
			},
			"condition_attribute_name": schema.StringAttribute{
				MarkdownDescription: "Dictionary attribute name",
				Computed:            true,
			},
			"condition_attribute_value": schema.StringAttribute{
				MarkdownDescription: "Attribute value for condition. Value type is specified in dictionary object.",
				Computed:            true,
			},
			"condition_dictionary_name": schema.StringAttribute{
				MarkdownDescription: "Dictionary name",
				Computed:            true,
			},
			"condition_dictionary_value": schema.StringAttribute{
				MarkdownDescription: "Dictionary value",
				Computed:            true,
			},
			"condition_operator": schema.StringAttribute{
				MarkdownDescription: "Equality operator",
				Computed:            true,
			},
			"children": schema.ListNestedAttribute{
				MarkdownDescription: "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"condition_type": schema.StringAttribute{
							MarkdownDescription: "Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.",
							Computed:            true,
						},
						"id": schema.StringAttribute{
							MarkdownDescription: "UUID for condition",
							Computed:            true,
						},
						"is_negate": schema.BoolAttribute{
							MarkdownDescription: "Indicates whereas this condition is in negate mode",
							Computed:            true,
						},
						"attribute_name": schema.StringAttribute{
							MarkdownDescription: "Dictionary attribute name",
							Computed:            true,
						},
						"attribute_value": schema.StringAttribute{
							MarkdownDescription: "Attribute value for condition. Value type is specified in dictionary object.",
							Computed:            true,
						},
						"dictionary_name": schema.StringAttribute{
							MarkdownDescription: "Dictionary name",
							Computed:            true,
						},
						"dictionary_value": schema.StringAttribute{
							MarkdownDescription: "Dictionary value",
							Computed:            true,
						},
						"operator": schema.StringAttribute{
							MarkdownDescription: "Equality operator",
							Computed:            true,
						},
						"children": schema.ListNestedAttribute{
							MarkdownDescription: "List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.",
							Computed:            true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"condition_type": schema.StringAttribute{
										MarkdownDescription: "Condition type.",
										Computed:            true,
									},
									"id": schema.StringAttribute{
										MarkdownDescription: "UUID for condition",
										Computed:            true,
									},
									"is_negate": schema.BoolAttribute{
										MarkdownDescription: "Indicates whereas this condition is in negate mode",
										Computed:            true,
									},
									"attribute_name": schema.StringAttribute{
										MarkdownDescription: "Dictionary attribute name",
										Computed:            true,
									},
									"attribute_value": schema.StringAttribute{
										MarkdownDescription: "Attribute value for condition. Value type is specified in dictionary object.",
										Computed:            true,
									},
									"dictionary_name": schema.StringAttribute{
										MarkdownDescription: "Dictionary name",
										Computed:            true,
									},
									"dictionary_value": schema.StringAttribute{
										MarkdownDescription: "Dictionary value",
										Computed:            true,
									},
									"operator": schema.StringAttribute{
										MarkdownDescription: "Equality operator",
										Computed:            true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}
func (d *NetworkAccessPolicySetDataSource) ConfigValidators(ctx context.Context) []datasource.ConfigValidator {
	return []datasource.ConfigValidator{
		datasourcevalidator.ExactlyOneOf(
			path.MatchRoot("id"),
			path.MatchRoot("name"),
		),
	}
}

func (d *NetworkAccessPolicySetDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*IseProviderData).Client
}

//template:end model

//template:begin read
func (d *NetworkAccessPolicySetDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config NetworkAccessPolicySet

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.Id.String()))
	if config.Id.IsNull() && !config.Name.IsNull() {
		for page := 1; ; page++ {
			res, err := d.client.Get(config.getPath())
			if err != nil {
				resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve objects, got error: %s", err))
				return
			}
			if value := res.Get("response"); len(value.Array()) > 0 {
				value.ForEach(func(k, v gjson.Result) bool {
					if config.Name.ValueString() == v.Get("name").String() {
						config.Id = types.StringValue(v.Get("id").String())
						tflog.Debug(ctx, fmt.Sprintf("%s: Found object with name '%v', id: %v", config.Id.String(), config.Name.ValueString(), config.Id.String()))
						return false
					}
					return true
				})
			}
			if !config.Id.IsNull() || !res.Get("SearchResult.nextPage").Exists() {
				break
			}
		}

		if config.Id.IsNull() {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to find object with name: %s", config.Name.ValueString()))
			return
		}
	}

	res, err := d.client.Get(config.getPath() + "/" + config.Id.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}

	config.fromBody(ctx, res)

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.Id.ValueString()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}

//template:end read
